{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/estib/desktop/tec8vo/dev/kencho-app/client/src/components/OpenPost.js\";\nimport React from \"react\";\nimport Navbar from \"./NavBar\";\nimport fetchAPI from '../lib/request';\nimport { Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction like() {\n  alert('agregado a post likeados');\n}\n\nfunction unlike() {\n  alert('eliminar de post likeados');\n}\n/* FUNCION QUE OBTIENE LA INFORMACION DEL USUARIO QUE HIZO EL COMMENT SE MANDA A LLAMAR EN EL 2 .THEN DE LA FETCH \nfunction commenter(userId){\n    const settings = {\n        method: 'GET'\n    }\n   \n    fetchAPI(`/user/${userId}`, settings)\n    .then( response => {\n        return response.json();\n    })\n    .then( data => {\n        this.setState({commenter:data});\n        console.log( data );\n        console.log(this.state);\n    })\n    .catch( err => {\n        console.log(err);\n    })\n}\n*/\n\n\nclass OpenPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: [],\n      commenter: []\n    };\n    console.log(this.state);\n  } //CHECAR FUNCION PARA AGREGAR UN POST LIKEADO\n\n  /*\n        like=(postOid)=>{\n          alert('agregado a post likeados');\n          let data ={\n              //userOid:userOid,\n              postOid:postOid,\n              liked:true\n          }\n          const settings={\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/json'\n              },\n              body : JSON.stringify( data )\n          }\n         \n          fetchAPI('/newLike',settings)\n          .then(response=>{\n              return response.json();\n          })\n          .then(newLikedPosts=>{\n              console.log(newLikedPosts);\n          })\n          .catch( err => {\n              console.log(err);\n          })\n          \n      }\n     */\n\n\n  componentDidMount() {\n    const settings = {\n      method: 'GET'\n    }; //check if its in production \n\n    fetchAPI(`/postsById/${this.props.match.params.id}`, settings).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        post: data\n      });\n      console.log(data);\n      console.log(this.state); //commenter(data.userOid);\n      //commenter(this.props.match.params.userOid);\n    }).catch(err => {\n      console.log(err);\n    });\n  } //SUBMIT DEL FORM CON COMENTARIO\n\n  /*\n    handleSubmit=(event)=>{\n      \n      event.preventDefault();\n      console.log(event.currentTarget.userComment.value);\n      const newComment= event.currentTarget.userComment.value;\n      const data={\n          content:newComment,\n          //userOid:,\n          //checar que regresa post.postOid\n          postOid:post.postOid\n      }\n      const settings={\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body : JSON.stringify( data )\n      }\n      \n      fetchAPI('/newComment',settings)\n      .then(response=>{\n          return response.json();\n      })\n      }\n      \n    */\n\n\n  render() {\n    const {\n      post\n    } = this.state;\n    console.log(post);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"imagesFeed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, post.map(post => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"borderImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    }, \"@\", post.userOid.username), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"images\",\n      src: post.image,\n      alt: post.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 41\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowUp,\n      size: \"3x\",\n      className: \"arrowUp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowDown,\n      size: \"3x\",\n      className: \"arrowDown\",\n      onClick: unlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"userComment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 65\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 53\n      }\n    }, this.state.value), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 45\n      }\n    }, post.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 58\n      }\n    }, comment.content), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 58\n      }\n    }, comment.userOid))))))));\n  }\n\n}\n\nexport default OpenPost;","map":{"version":3,"sources":["/mnt/c/Users/estib/desktop/tec8vo/dev/kencho-app/client/src/components/OpenPost.js"],"names":["React","Navbar","fetchAPI","Button","FontAwesomeIcon","faArrowUp","faArrowDown","like","alert","unlike","OpenPost","Component","constructor","props","state","post","commenter","console","log","componentDidMount","settings","method","match","params","id","then","response","json","data","setState","catch","err","render","map","userOid","username","image","title","handleSubmit","value","comments","comment","content"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Navbar from \"./NavBar\";\nimport fetchAPI from '../lib/request';\nimport { Button } from 'react-bootstrap';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faArrowUp} from \"@fortawesome/free-solid-svg-icons\";\nimport {faArrowDown} from \"@fortawesome/free-solid-svg-icons\";\n\n\nfunction like(){\n    alert('agregado a post likeados');\n    \n}\nfunction unlike(){\n    alert('eliminar de post likeados');\n}\n\n/* FUNCION QUE OBTIENE LA INFORMACION DEL USUARIO QUE HIZO EL COMMENT SE MANDA A LLAMAR EN EL 2 .THEN DE LA FETCH \nfunction commenter(userId){\n    const settings = {\n        method: 'GET'\n    }\n   \n    fetchAPI(`/user/${userId}`, settings)\n    .then( response => {\n        return response.json();\n    })\n    .then( data => {\n        this.setState({commenter:data});\n        console.log( data );\n        console.log(this.state);\n    })\n    .catch( err => {\n        console.log(err);\n    })\n}\n*/\n\nclass OpenPost extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n     \n        this.state = {\n          post:[],\n          commenter:[],\n          \n        };\n    \n        \n        console.log(this.state);\n      }\n//CHECAR FUNCION PARA AGREGAR UN POST LIKEADO\n/*\n      like=(postOid)=>{\n        alert('agregado a post likeados');\n        let data ={\n            //userOid:userOid,\n            postOid:postOid,\n            liked:true\n        }\n        const settings={\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body : JSON.stringify( data )\n        }\n       \n        fetchAPI('/newLike',settings)\n        .then(response=>{\n            return response.json();\n        })\n        .then(newLikedPosts=>{\n            console.log(newLikedPosts);\n        })\n        .catch( err => {\n            console.log(err);\n        })\n        \n    }\n   */    \n    componentDidMount(){\n        const settings = {\n            method: 'GET'\n        }\n        //check if its in production \n        fetchAPI(`/postsById/${this.props.match.params.id}`, settings)\n        .then( response => {\n            return response.json();\n        })\n        .then( data => {\n            \n            this.setState({post:data});\n            console.log( data );\n            console.log(this.state);\n            //commenter(data.userOid);\n            //commenter(this.props.match.params.userOid);\n        })\n        .catch( err => {\n            console.log(err);\n        })\n\n        \n    }\n   \n    //SUBMIT DEL FORM CON COMENTARIO\n    /*\n      handleSubmit=(event)=>{\n        \n        event.preventDefault();\n        console.log(event.currentTarget.userComment.value);\n        const newComment= event.currentTarget.userComment.value;\n        const data={\n            content:newComment,\n            //userOid:,\n            //checar que regresa post.postOid\n            postOid:post.postOid\n        }\n        const settings={\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body : JSON.stringify( data )\n        }\n        \n        fetchAPI('/newComment',settings)\n        .then(response=>{\n            return response.json();\n        })\n\n\n      }\n        \n      */\n    render() {\n        const {post}=this.state;\n        console.log(post);\n        return (\n            <>\n                <Navbar></Navbar>\n                <div className=\"imagesFeed\">\n                    {post.map(post=>\n                        <div className=\"borderImage\">\n                            <div>\n                                 @{post.userOid.username}\n                            </div>\n                                <img  className=\"images\" src={post.image} alt={post.title}/>\n                                        <p>{post.title}</p>\n                                            <span>\n                                            {/*<FontAwesomeIcon icon={faArrowUp} size='3x' className=\"arrowUp\" onClick={()=>this.like(post.postOid)}>*/}\n                                                <FontAwesomeIcon icon={faArrowUp} size='3x' className=\"arrowUp\" >\n                                                </FontAwesomeIcon>\n                                                    <FontAwesomeIcon icon={faArrowDown} size='3x' className=\"arrowDown\"  onClick={unlike}>\n                                                    </FontAwesomeIcon>\n                                                                    \n                                            </span>\n                                                <div>\n                                                    <form onSubmit={this.handleSubmit}>\n                                                        <textarea name=\"userComment\"/>\n                                                            <div>\n                                                                <input type=\"submit\" value=\"Submit\" />\n                                                            </div>\n                                                    </form>\n                                                </div>\n                                               \n                                                    <div>\n                                                        {this.state.value}\n                                                    </div>\n                                                \n                                                \n                                            <div> \n                                                {post.comments.map(comment=>\n                                                    <div>\n                                                         <p>{comment.content}</p>\n                                                         <p>{comment.userOid}</p>\n                                                        \n                                                    </div>\n                                                    )}\n                                                    \n                                            </div>\n                            </div>\n                    )}  \n                    {/*\n                <div className=\"borderImage\">\n                                   <p>@username</p>\n                               <br>\n                               </br>\n                                   <img className=\"images\"src={require('../assets/corgi.png')} alt=\"Corgi\" />\n                                    <p>Caption del meme</p>\n                                    <br>\n                                     </br>\n                                   <div>\n                                       <span>\n                                   <FontAwesomeIcon icon={faArrowUp} size='4x' className=\"arrowUp\" onClick={like}>\n                                   </FontAwesomeIcon>\n                                \n                                   <FontAwesomeIcon icon={faArrowDown} size='4x' className=\"arrowDown\" onClick={unlike}>\n                                   </FontAwesomeIcon>\n                                   </span>\n                                  <div>\n                                     <textarea placeholder=\"Dejar un comentario...\"\n                                    onChange={this.handleChange}\n                                    rows={3}\n                                    cols={40}\n                                    />\n                                     </div>\n                                     <Button variant=\"success\" style={{ height: 30 }} >Comentar</Button>\n                                 <p>Cargar todos los comentarios abajo</p>\n                               </div>\n                               </div>\n                               <br>\n                               </br>\n                    */}\n                 </div>\n            </>\n        );\n    }\n}\nexport default OpenPost;\n"]},"metadata":{},"sourceType":"module"}