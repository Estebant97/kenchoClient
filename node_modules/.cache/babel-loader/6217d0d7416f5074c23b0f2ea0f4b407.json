{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/estib/desktop/tec8vo/dev/kencho-app/client/src/components/AddPost.js\";\nimport React from \"react\";\nimport Navbar from \"./NavBar\";\nimport fetchAPI from \"../lib/request\"; // post del user\n// pasarle el metodo post del post\n\nclass AddPost extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleUpload = event => {\n      // recibir el value del title y la imagen\n      event.preventDefault();\n      let title = document.getElementById('title').value; //var image = getBase64Image(document.getElementById('image').files[0]);\n\n      console.log(title);\n      const preview = document.getElementById(\"image\").files[0];\n      const file = document.querySelector('input[type=file]').files[0];\n      const reader = new FileReader(); //const regex = 'data:image/png;base64,';\n\n      reader.addEventListener(\"load\", function () {\n        preview.src = reader.result;\n      }, false);\n\n      if (file) {\n        reader.readAsDataURL(file);\n\n        reader.onload = function (e) {\n          var rawLog = reader.result;\n          var image = '';\n\n          for (let i = 23; i < rawLog.length; i++) {\n            image += rawLog[i];\n          }\n\n          let data = {\n            title: title,\n            image: image\n          }; //API call to imgur\n\n          const settings = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Client-ID 373d237cc76ba81'\n            },\n            body: JSON.stringify(data)\n          };\n          fetch(\"https://api.imgur.com/3/image\", settings).then(response => {\n            return response.json();\n          }).then(responseJson => {\n            const accessToken = localStorage.getItem(\"accessToken\");\n            console.log(\"accessToken\");\n            const data = {\n              title: title,\n              image: responseJson.link\n            };\n            const settings = {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${accessToken}`\n              },\n              body: JSON.stringify(data)\n            };\n            console.log(responseJson);\n            fetchAPI('/newPost', settings).then(response => {\n              return response.json();\n            }).then(login => {\n              alert.innerHTML += `<div class=\"alert alert-success\" role=\"alert\">\n                                            El post se ha realizado correctamente\n                                            </div>`;\n            }).catch(err => {\n              console.log(err);\n            }); // si se realiza correctamente hacer una funcion que reciba como parametro el user, el title y la url de la imagen\n            // tomar el username del accessToken\n            //handlePost(username, title, image)\n            //console.log(this.state);\n          }).catch(err => {\n            console.log(err);\n          });\n        };\n      }\n    };\n  }\n\n  render() {\n    //const { name, description, category, price } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5 py-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    }, \"Titulo\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"form-control\",\n      id: \"title\",\n      rows: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, \"Imagen\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control-file\",\n      id: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn mt-5\",\n      style: {\n        width: '45%',\n        backgroundColor: '#03989e',\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, \"Subir meme\"))))));\n  }\n\n}\n\nexport default AddPost;","map":{"version":3,"sources":["/mnt/c/Users/estib/desktop/tec8vo/dev/kencho-app/client/src/components/AddPost.js"],"names":["React","Navbar","fetchAPI","AddPost","Component","handleUpload","event","preventDefault","title","document","getElementById","value","console","log","preview","files","file","querySelector","reader","FileReader","addEventListener","src","result","readAsDataURL","onload","e","rawLog","image","i","length","data","settings","method","headers","Authorization","body","JSON","stringify","fetch","then","response","json","responseJson","accessToken","localStorage","getItem","link","login","alert","innerHTML","catch","err","render","width","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"./NavBar\";\r\nimport fetchAPI from \"../lib/request\";\r\n\r\n\r\n// post del user\r\n// pasarle el metodo post del post\r\n\r\nclass AddPost extends React.Component {\r\n    // si se pone el component did mount va arriba\r\n    handleUpload = (event) => {\r\n        // recibir el value del title y la imagen\r\n        event.preventDefault();\r\n        let title = document.getElementById('title').value;\r\n        //var image = getBase64Image(document.getElementById('image').files[0]);\r\n        console.log(title);\r\n        const preview = document.getElementById(\"image\").files[0];\r\n        const file = document.querySelector('input[type=file]').files[0];\r\n        const reader = new FileReader();\r\n        //const regex = 'data:image/png;base64,';\r\n        reader.addEventListener(\"load\", function(){\r\n            preview.src = reader.result;\r\n        }, false);\r\n        if(file){\r\n            reader.readAsDataURL(file);\r\n            reader.onload = function(e){\r\n                var rawLog = reader.result;\r\n                var image = '';\r\n                for(let i = 23; i < rawLog.length; i++){\r\n                    image += rawLog[i];\r\n                }\r\n                let data = {\r\n                    title: title,\r\n                    image: image\r\n                };\r\n                //API call to imgur\r\n                const settings = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Client-ID 373d237cc76ba81'\r\n                    },\r\n                    body : JSON.stringify( data )\r\n                };\r\n                fetch(\"https://api.imgur.com/3/image\", settings)\r\n                .then( response => {\r\n                        return response.json();\r\n                })\r\n                .then( responseJson => {\r\n                    const accessToken = localStorage.getItem(\"accessToken\");\r\n                    console.log(\"accessToken\");\r\n                    const data = {\r\n                        title : title,\r\n                        image : responseJson.link\r\n                    }\r\n                    const settings = {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            Authorization: `Bearer ${accessToken}`\r\n                        },\r\n                        body : JSON.stringify( data )\r\n                    };\r\n                    console.log( responseJson );\r\n\r\n                    fetchAPI('/newPost', settings)\r\n                    .then( response => {\r\n                        return response.json();\r\n                    })\r\n                    .then( login => {\r\n                        alert.innerHTML += `<div class=\"alert alert-success\" role=\"alert\">\r\n                                            El post se ha realizado correctamente\r\n                                            </div>`;\r\n                    })\r\n                    .catch( err => {\r\n                        console.log(err);\r\n                    })\r\n                    // si se realiza correctamente hacer una funcion que reciba como parametro el user, el title y la url de la imagen\r\n                    // tomar el username del accessToken\r\n                    //handlePost(username, title, image)\r\n                    //console.log(this.state);\r\n                })\r\n                .catch( err => {\r\n                    console.log(err);\r\n                })\r\n            }\r\n            }\r\n        }\r\n    render() {\r\n        //const { name, description, category, price } = this.state;\r\n        return (\r\n            <>\r\n                <Navbar></Navbar>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"mt-5 py-3\">\r\n                            <form onSubmit={this.handleUpload}>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"title\">Titulo</label>\r\n                                    <textarea className=\"form-control\" id=\"title\" rows=\"3\"></textarea>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                <label htmlFor=\"image\">\r\n                                    Imagen\r\n                                </label>\r\n                                <input type=\"file\" className=\"form-control-file\" id=\"image\"></input>\r\n                                </div>\r\n                                <button type=\"submit\" className=\"btn mt-5\" style={{width: '45%', backgroundColor: '#03989e', color: 'white'}}>\r\n                                    Subir meme\r\n                                </button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default AddPost;\r\n"]},"metadata":{},"sourceType":"module"}